filetype plugin indent on

call plug#begin('~/.local/share/nvim/plugged')

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocomplete. ** Exclusive to neovim.
Plug 'zchee/deoplete-clang'             " Clang completeion for deoplete.
Plug 'kien/ctrlp.vim'                   " Uses Ctrl+P to search the files on folders.
Plug 'easymotion/vim-easymotion'        " \\w to move around the file efficiently.
Plug 'mhinz/vim-signify'                " Marks modified lines from vc.
Plug 'neomake/neomake'                  " A syntax checker.
Plug 'dag/vim-fish'                     " Fish syntax (adds to syntastic.
Plug 'vim-airline/vim-airline'          " Status bar for vim.
Plug 'vim-airline/vim-airline-themes'   " Themes for airline.
Plug 'scrooloose/nerdcommenter'         " Easy commenting.
Plug 'ervandew/supertab'                " Tab autocompletion.

call plug#end()

" Map the leader key to SPACE
let mapleader="\<SPACE>"

" Airline extensions
let g:airline_symbols_ascii = 1
let g:airline_left_sep = ' '
let g:airline_left_alt_sep = '|'
let g:airline_right_sep = ' '
let g:airline_right_alt_sep = '|'
let g:airline_theme= 'wombat'

" Use AG Silversearch
let g:ackprg = 'ag --nogroup --nocolor --column'

" Add a dummy sign so that the sign line is always on.
" This way code won't keep jumping in the screen.
sign define dummy
execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

" Automatically run Neomake.
autocmd! BufWritePost * Neomake

" Let Signify adjust the changes the entire time :)
let g:signify_realtime = 1

" Nerd commenter settings.
let g:NERDTrimTrailingWhitespace = 1

" Have Deople (autocomplete) work at startup.
let g:deoplete#enable_at_startup = 1

" CtrlP nicer shortcuts.
" Open file menu
nnoremap <Leader>o :CtrlP<CR>
" Open buffer menu
nnoremap <Leader>b :CtrlPBuffer<CR>
" Open most recently used files
nnoremap <Leader>f :CtrlPMRUFiles<CR>

" Some nice tab shortcuts.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set showmode            " Show current mode.
set ruler               " Show the line and column numbers of the cursor.
set number              " Show the line numbers on the left side.
set formatoptions+=o    " Continue comment marker in new lines.
set expandtab           " Insert spaces when TAB is pressed.
set tabstop=2           " Render TABs using this many spaces.
set shiftwidth=2        " Indentation amount for < and > commands.

if !&scrolloff
  set scrolloff=5       " Show next 3 lines while scrolling.
endif
if !&sidescrolloff
  set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif

" Tell Vim which characters to show for expanded TABs,
" " trailing whitespace, and end-of-lines. VERY useful!
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
set list                " Show problematic characters.

" Also highlight all tabs and trailing whitespace characters.
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$\|\t/

set incsearch           " Search as you type.
set hlsearch            " Highlight search.
set ignorecase          " Make searching case insensitive.
set smartcase           " ... unless the query has capital letters.
set gdefault            " Use 'g' flag by default with :s/foo/bar/
set magic               " Use 'magic' patterns (extended regular expressions).

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endi

set termguicolors

" Sad hack for problems on WSL.
map ^[[D h
map ^[[C l
map ^[[A k
map ^[[B j

map! ^[[D <Left>
map! ^[[C <Right>
map! ^[[A <Up>
map! ^[[B <Down>
